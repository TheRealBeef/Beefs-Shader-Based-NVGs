#include "common.h"
#include "night_vision.h"

struct         v2p
{
	float4	factor	: COLOR0;        // for SM3 - factor.rgb - tonemap-prescaled
	float3	tc0		: TEXCOORD0;
	float3	tc1		: TEXCOORD1;
	float4  sv    : SV_Position;
};

struct        _out
{
	float4	low		: SV_Target0;
	float4	high	: SV_Target1;
};


TextureCube	s_sky0	:register(t0);
TextureCube	s_sky1	:register(t1);


//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
_out main( v2p I )
{

	float3	s0		= s_sky0.Sample( smp_rtlinear, I.tc0 );
	float3	s1		= s_sky1.Sample( smp_rtlinear, I.tc1 );
	float3	sky		= I.factor*lerp( s0, s1, I.factor.w );

	// final tone-mapping
	_out			o;

	o.low        	=		( (sky*(1+sky/2.89)) / (sky+1) ).xyzz;
	o.high        	=		o.low /def_hdr	;
	
			float2 texturecoord = I.sv.xy / screen_res.xy;
			float2 texturecoord_2 = I.sv.xy / screen_res.xy;
	
			if (shader_param_8.x > 0 && ((compute_lens_mask(aspect_ratio_correction(texturecoord), shader_param_8.y) == 1.0f || compute_lens_mask(aspect_ratio_correction(texturecoord_2), shader_param_8.y) == 1.0f)))
			//if (shader_param_8.x > 0 && (compute_lens_mask(aspect_ratio_correction(texturecoord), shader_param_8.x) == 1))
			{
			o.low.r = dot(o.low.rgb * 3.0f, luma_conversion_coeff);
			o.high.r = dot(o.high.rgb * 3.0f, luma_conversion_coeff);
			
			o.low.gb = 0.0f;
			o.high.gb = 0.0f;
			
			o.low *= shader_param_8.w;
			o.high *= shader_param_8.w;
			
			o.high = clamp(o.high,0.0,1.0);
			o.low= clamp(o.low,0.0,1.0);
			
			float vignette = calc_vignette(shader_param_8.y, texturecoord, gen_1_vignette_amount);
			float vignette_2 = calc_vignette(shader_param_8.y, texturecoord_2, gen_1_vignette_amount);
			o.low *= (vignette * vignette_2);
			o.high *= (vignette * vignette_2);
			}
	
	return        	o;
}