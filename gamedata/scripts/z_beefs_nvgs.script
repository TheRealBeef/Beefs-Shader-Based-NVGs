-- Beef NVG MCM values
local nvg_gain_max = 2.0		-- max value for nvg gain (brightness)
local nvg_gain_min = 0.3		-- min value for nvg gain (brightness)
local nvg_washout_thresh = 0.1			-- used to calculate washout effect on light sources
local nvg_view_through_scope = false		-- can you keep your NVGs on when looking through scope?

-- Variables
local is_nvg_on = false			-- turned on or off?
local nvg_generation		-- 1, 2, or 3
local nvg_num_tubes			-- 1, 2, or 4 tubes -- 11 for single offset left and 12 for single offset right
local nvg_gain_current		-- current gain setting
local vignette_amount		-- standard vignette value
local vignette_current		-- current vignette value, for turn-on/ turn-off effect
local glitch_power			-- how much 'glitch' to add to NVGs
local nvg_mode				-- future functionality

local nv_eff = {}

-- Useful debug messages similar to Raven's, from Mr. Minotaur
function print_dbg( text , ...)
	if true then
		printf( "Zoom: | %s |  "..text ,time_global(), ...)
	end
end

function get_on_start()
	nvg_gain_max = beef_nvgs_mcm.get_config("nvg_gain_max_mcm")
	nvg_gain_min = beef_nvgs_mcm.get_config("nvg_gain_min_mcm")
	nvg_washout_thresh = beef_nvgs_mcm.get_config("nvg_washout_thresh_mcm")
	nvg_view_through_scope = beef_nvgs_mcm.get_config("nvg_view_through_scope_mcm")
end

local function on_option_change()
	if is_mcm_open then
		nvg_gain_max = beef_nvgs_mcm.get_config("nvg_gain_max_mcm")
		nvg_gain_min = beef_nvgs_mcm.get_config("nvg_gain_min_mcm")
		nvg_washout_thresh = beef_nvgs_mcm.get_config("nvg_washout_thresh_mcm")
		nvg_view_through_scope = beef_nvgs_mcm.get_config("nvg_view_through_scope_mcm")
	end
end

function pack_nvg_data()

        local x_1 = tostring(nvg_generation)                           -- Generation (1,2,3) - outputs 1.x to 3.x
        local x_2 = tostring(nvg_num_tubes)                            -- Num Tubes (1,2,4,11,12) outputs x.1, x.2, x.4, x.11, or x.12
        local y_1 = tostring(math.floor(nvg_gain_current * 10))        -- Gain Adjust (0.1 to 3) -- outputs 1.y to 30.y in 1. increment
        local y_2 = tostring(math.floor(nvg_washout_thresh * 10))      -- Washout Thresh (0.0 - 0.9) - outputs y.0 to y.9 in .1 increment
        local z_1 = tostring(math.floor(vignette_current * 100))       -- Vignette Amount (0.0 to 1.0) outputs 0.z to 100.z in 1. increment
        local z_2 = tostring(math.floor(glitch_power * 10))            -- Glitch Power (0.0 - 0.9) - outputs z.0 to z.9 in .1 increment
        local w_1 = tostring(nvg_mode)                                 -- Mode (0,1) - outputs 0.w or 1.w depending on mode
        local w_2 = tostring(0)                                        -- unused - outputs w.0

        return "(" .. x_1 .. "." .. x_2 .. "," .. y_1 .. "." .. y_2 .. "," .. z_1 .. "." .. z_2 .. "," .. w_1 .. "." .. w_2 .. ")"
end


function item_device.set_nightvision(section,state)
	if (not section) then
		return
	end
	
	nv_eff[section] = nv_eff[section] or ini_sys:r_string_ex(section,"nv_effect")
	
	if nv_eff[section] != nil then
		 
		local nv_state = item_device.is_nv_active()
			
		if nv_eff[section] ~= "nightvision_1" then nvg_generation = 1 end
		if nv_eff[section] ~= "nightvision_2" then nvg_generation = 2 end
		if nv_eff[section] ~= "nightvision_3" then nvg_generation = 3 end
		
		if state and (not nv_state) then
			get_console():execute("r__nightvision " .. nvg_generation )
			get_console():execute("shader_param_8 " .. pack_nvg_data() )
			utils_obj.play_sound("interface\\inv_nv_start")
			nv_state = true
		end
		
		elseif (not state) and nv_state then
			local ppe = ppe_effects[nv_eff[section]]
			get_console():execute("r__nightvision 0")
			get_console():execute("shader_param_8 (0,0,0,0)")
			utils_obj.play_sound("interface\\inv_nv_off")
			nv_state = false
		end
	end
end

	

-- manipulate the vignette on 'turn on' to fade from black to nvg by manipulating vignette
function turn_on_effect()
	if not is_nvg_on then
		vignette_current = 1.0
		is_nvg_on = true
	end
	
	if vignette_current > vignette_amount then
		vignette_current = vignette_current * 0.8
	end
	
	if vignette_current <= vignette_amount then
		vignette_current = vignette_amount
	end
	
	return vignette_current;
end

-- manipulate the vignette on 'turn off' to fade from nvg to black by manipulating vignette
function turn_off_effect()
	if is_nvg_on then
		vignette_current = vignette_amount
		is_nvg_on = false
	end
	
	if vignette_current < 1.0 then
		vignette_current = vignette_current / 0.8
	end
	
	if vignette_current >= 1.0 then
		vignette_current = 1.0
	end
	
	return vignette_current;
end

-- nvg glitch effect during blowouts
function nvg_blowout_glitch()

end

-- turn off nvgs when aiming down sights
function actor_on_weapon_zoom_in()
	if not nvg_view_through_scope then
		if is_nvg_on then
			-- here we'll turn off the nvg effect
		end
	end
end

-- turn on nvgs when stop aiming down sights
function actor_on_weapon_zoom_out()
	if not nvg_view_through_scope then
		if is_nvg_on then
			-- here we'll turn on the nvg effect again
		end
	end
end

-- long press to turn on/off NVG, short press to change brightness
function on_key_press()

end

function on_key_release()

end


function on_game_start()
	RegisterScriptCallback("on_option_change", on_option_change)
	RegisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
	RegisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
	RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("on_key_press", on_key_press)
    RegisterScriptCallback("on_key_release", on_key_release)
end